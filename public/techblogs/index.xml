<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Techblogs on Quality Tech Rider</title>
    <link>http://localhost:1313/arvindaru888.github.io/techblogs/</link>
    <description>Recent content in Techblogs on Quality Tech Rider</description>
    <generator>Hugo -- gohugo.io</generator>
    <language></language>
    <lastBuildDate>Wed, 10 Jul 2024 18:06:07 +0530</lastBuildDate><atom:link href="http://localhost:1313/arvindaru888.github.io/techblogs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What is Gatling ?</title>
      <link>http://localhost:1313/arvindaru888.github.io/techblogs/whatisgatling/</link>
      <pubDate>Wed, 10 Jul 2024 18:06:07 +0530</pubDate>
      
      <guid>http://localhost:1313/arvindaru888.github.io/techblogs/whatisgatling/</guid>
      <description>&lt;p&gt;Gatling DSL (Domain-Specific Language) is a specialized programming language designed specifically for defining and running performance tests with Gatling, an open-source load testing tool. The DSL allows testers and developers to write expressive, concise, and readable performance test scenarios in Scala, which is the language Gatling is built on. The Gatling DSL abstracts much of the complexity involved in writing performance tests, making it easier to define scenarios, configure requests, and perform checks.&lt;/p&gt;
&lt;p&gt;Key Features of Gatling DSL are&lt;/p&gt;
&lt;h3 id=&#34;scenario-definition&#34;&gt;Scenario Definition:&lt;/h3&gt;
&lt;p&gt;Define the sequence of HTTP requests and actions that simulate user behavior.&lt;/p&gt;
&lt;h3 id=&#34;http-requests&#34;&gt;HTTP Requests:&lt;/h3&gt;
&lt;p&gt;Configure GET, POST, PUT, DELETE, and other HTTP requests.&lt;/p&gt;
&lt;h3 id=&#34;checks&#34;&gt;Checks:&lt;/h3&gt;
&lt;p&gt;Validate responses with assertions, such as checking status codes, response times, and specific data in the responses.&lt;/p&gt;
&lt;h3 id=&#34;feeders&#34;&gt;Feeders:&lt;/h3&gt;
&lt;p&gt;Provide dynamic data to the tests using feeders, which can read data from CSV files, JSON files, and other sources.&lt;/p&gt;
&lt;h3 id=&#34;injection-profiles&#34;&gt;Injection Profiles:&lt;/h3&gt;
&lt;p&gt;Define how users are injected into the system over time, such as ramping up users gradually or starting with a burst of users.&lt;/p&gt;
&lt;h3 id=&#34;reports&#34;&gt;Reports:&lt;/h3&gt;
&lt;p&gt;Generate detailed and graphical reports of the test results, showing metrics like response times, request counts, and error rates.&lt;/p&gt;
&lt;p&gt;Example of Gatling DSL
Here&amp;rsquo;s a simple example to demonstrate the usage of the Gatling DSL:&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;import io.gatling.core.Predef._
import io.gatling.http.Predef._

class MySimulation extends Simulation {

  // Define the HTTP protocol configuration
  val httpProtocol = http
	.baseUrl(&amp;quot;http://example.com&amp;quot;) // Base URL for all requests
	.acceptHeader(&amp;quot;application/json&amp;quot;) // Default headers
	.userAgentHeader(&amp;quot;Gatling&amp;quot;)

  // Define a feeder for dynamic data
  val feeder = csv(&amp;quot;data/users.csv&amp;quot;).circular

  // Define the scenario
  val scn = scenario(&amp;quot;My Scenario&amp;quot;)
	.feed(feeder) // Use the feeder for dynamic data
	.exec(http(&amp;quot;Get User&amp;quot;)
	  .get(&amp;quot;/user/${userId}&amp;quot;) // Dynamic URL based on feeder data
	  .check(status.is(200)) // Check that the response status is 200
	  .check(jsonPath(&amp;quot;$.name&amp;quot;).is(&amp;quot;${userName}&amp;quot;)) // Check the JSON response
	)

  // Set up the simulation with injection profile
  setUp(
	scn.inject(
	  atOnceUsers(10), // Inject 10 users at once
	  rampUsers(100).during(10.seconds) // Ramp up to 100 users over 10 seconds
	).protocols(httpProtocol) // Use the HTTP protocol configuration
  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Explanation
HTTP Protocol Configuration: Sets the base URL and default headers for the HTTP requests.
Feeder: Reads dynamic data from a CSV file to be used in the requests.
Scenario Definition: Defines a scenario named &amp;ldquo;My Scenario&amp;rdquo; that performs a GET request to /user/${userId}, where ${userId} is a placeholder for dynamic data from the feeder. The scenario includes checks to validate the response status and specific data in the JSON response.
Injection Profile: Defines how users are injected into the simulation. In this example, 10 users are injected at once, and then 100 users are ramped up over 10 seconds.
Simulation Setup: Sets up the simulation with the defined scenario and HTTP protocol configuration.
Benefits of Gatling DSL
Readability: The DSL makes it easy to read and understand performance test scenarios, even for those who are not familiar with Scala.
Expressiveness: The DSL provides a rich set of features to express complex scenarios and checks concisely.
Reusability: Scenarios, feeders, and configurations can be reused across different tests, promoting code reuse and maintainability.
Extensibility: Custom actions and checks can be implemented in Scala, allowing for advanced customization and extension of the DSL.
The Gatling DSL is a powerful tool that simplifies the creation and management of performance tests, enabling teams to effectively simulate and analyze user behavior under load.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gatling</title>
      <link>http://localhost:1313/arvindaru888.github.io/techblogs/techblogs2/</link>
      <pubDate>Tue, 02 Jul 2024 22:07:16 +0530</pubDate>
      
      <guid>http://localhost:1313/arvindaru888.github.io/techblogs/techblogs2/</guid>
      <description>&lt;p&gt;HAR (Http Archive Resource)&lt;/p&gt;
&lt;p&gt;hi&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Future Of Software Testing</title>
      <link>http://localhost:1313/arvindaru888.github.io/techblogs/futureoftesting/</link>
      <pubDate>Tue, 02 Jul 2024 20:18:08 +0530</pubDate>
      
      <guid>http://localhost:1313/arvindaru888.github.io/techblogs/futureoftesting/</guid>
      <description>&lt;p&gt;The future of software testing is being shaped by several emerging areas. Here&amp;rsquo;s a closer look at AI/ML Testing, Security Testing, and Performance Engineering and Load Testing:&lt;/p&gt;
&lt;h2 id=&#34;1-aiml-testing&#34;&gt;1. AI/ML Testing&lt;/h2&gt;
&lt;p&gt;Artificial Intelligence (AI) and Machine Learning (ML) are revolutionizing software testing by introducing automation and intelligent analysis.&lt;/p&gt;
&lt;h3 id=&#34;test-automation&#34;&gt;Test Automation:&lt;/h3&gt;
&lt;p&gt;AI can automate repetitive tasks, reducing the need for manual testing and increasing efficiency. AI-driven tools can generate test scripts, execute tests, and analyze results automatically.&lt;/p&gt;
&lt;h3 id=&#34;intelligent-test-generation&#34;&gt;Intelligent Test Generation:&lt;/h3&gt;
&lt;p&gt;ML algorithms can analyze code changes and user behavior to predict the areas of an application most likely to contain defects, focusing testing efforts where they are needed most.&lt;/p&gt;
&lt;h3 id=&#34;self-healing-tests&#34;&gt;Self-healing Tests:&lt;/h3&gt;
&lt;p&gt;AI can adapt to changes in the application UI, making test scripts more resilient to changes and reducing maintenance efforts.&lt;/p&gt;
&lt;h3 id=&#34;defect-prediction&#34;&gt;Defect Prediction:&lt;/h3&gt;
&lt;p&gt;AI can predict potential defects and prioritize testing based on historical data, reducing the time and effort required to identify issues.&lt;/p&gt;
&lt;h2 id=&#34;2-security-testing&#34;&gt;2. Security Testing&lt;/h2&gt;
&lt;p&gt;As cyber threats become more sophisticated, security testing is increasingly critical.&lt;/p&gt;
&lt;p&gt;Shift-Left Security: Integrating security testing early in the development lifecycle ensures vulnerabilities are identified and addressed sooner. This approach, known as &amp;ldquo;shift-left&amp;rdquo; testing, helps in building secure software from the ground up.
Continuous Security Testing: Implementing continuous integration/continuous deployment (CI/CD) pipelines with integrated security testing ensures that every code change is tested for security vulnerabilities.
Advanced Threat Simulation: Tools and techniques that simulate advanced threats can help identify vulnerabilities that traditional testing methods might miss.
AI in Security Testing: AI can be used to detect unusual patterns and behaviors that might indicate a security breach, helping to prevent attacks in real-time.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Performance Engineering and Load Testing
Ensuring software performs well under various conditions is crucial for user satisfaction and business success.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Shift-Left Performance Testing: Just like security, performance testing is moving earlier in the development cycle to catch issues sooner.
Continuous Performance Monitoring: Integrating performance testing into CI/CD pipelines allows for continuous monitoring and optimization of performance.
Scalability Testing: With the growing use of cloud services, testing for scalability to ensure applications can handle increasing loads without performance degradation is essential.
AI in Performance Testing: AI can analyze performance data to identify patterns and predict potential performance issues before they occur.&lt;/p&gt;
&lt;h1 id=&#34;conclusion-&#34;&gt;Conclusion :&lt;/h1&gt;
&lt;p&gt;The future of software testing is being driven by advancements in AI/ML, increased focus on security, and the need for robust performance engineering. Adopting to these trends and learning the skills that are required would keep the testing jobs alive !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Request Headers and Response Headers</title>
      <link>http://localhost:1313/arvindaru888.github.io/techblogs/techblogs/</link>
      <pubDate>Tue, 02 Jul 2024 20:18:08 +0530</pubDate>
      
      <guid>http://localhost:1313/arvindaru888.github.io/techblogs/techblogs/</guid>
      <description>&lt;h2 id=&#34;what-are-request-headers&#34;&gt;What are Request Headers?&lt;/h2&gt;
&lt;p&gt;In simple terms additional meta-data sent by the client to server are called Request Headers , some of the main important request headers are as below .&lt;/p&gt;
&lt;h2 id=&#34;1user-agent-&#34;&gt;1)User-Agent :&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;This header reveals the client identity such as browser name, browser version,OS version etc.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2connection-&#34;&gt;2)Connection :&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;This header reveals the  State of connectivity between client and server , possibe values are {keep-alive;close}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3accept-----&#34;&gt;3)Accept     :&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;This header reveals the client prefernce format (eg .JSON,XML,HTML,XML,YAML etc) in which the server response to be sent to the client 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4accept-lang&#34;&gt;4)Accept-Lang:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;This header reveals the client prefernce language (eg .EN-US,EN-IND,EN-GB etc) in which the server response to be sent to the client 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5content-type&#34;&gt;5)Content-Type:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;This header reveals the type of content/format (eg.json,xml,html,yaml) which client vis sending the request body/payload to the server
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;6authorization-&#34;&gt;6)Authorization :&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;This header reveals the user auth details to the server to establish the client identity to the server
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ok-now-lets-understand-what-are-response-headers&#34;&gt;Ok, Now lets understand What are Response Headers&lt;/h2&gt;
&lt;p&gt;In simple terms additional meta-data sent by the server to client are called Response Headers , some of the main important request headers are as below&lt;/p&gt;
&lt;h2 id=&#34;1user-agent--1&#34;&gt;1)User-Agent :&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;This header reveals the client identity such as browser name, browser version,OS version etc.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2connection--1&#34;&gt;2)Connection :&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;This header reveals the  State of connectivity between client and server , possibe values are {keep-alive;close}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3accept------1&#34;&gt;3)Accept     :&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;This header reveals the client prefernce format (eg .JSON,XML,HTML,XML,YAML etc) in which the server response to be sent to the client 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4accept-lang-1&#34;&gt;4)Accept-Lang:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;This header reveals the client prefernce language (eg .EN-US,EN-IND,EN-GB etc) in which the server response to be sent to the client 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5content-type-1&#34;&gt;5)Content-Type:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;This header reveals the type of content/format (eg.json,xml,html,yaml) which client vis sending the request body/payload to the server
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;6authorization--1&#34;&gt;6)Authorization :&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;This header reveals the user auth details to the server to establish the client identity to the server&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>